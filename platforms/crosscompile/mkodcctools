#!/bin/sh -e
# Build a Linux to MacoSX cross compiler
# Created by Lawrence Rust, lvr at softsystem dot co dot uk
# Based on http://biolpc22.york.ac.uk/pub/linux-mac-cross/Makefile

readonly name="$0"
readonly version="0.2"

myhelp() { cat <<-END
Build a Linux to MacoSX cross compiler
Usage: `basename $name` [options]
Options:
  -3        MacOSX10.3.9 (ppc) SDK from XCode 2.4 1 and Apple gcc-5247 (v4.0.1)
  -4        MacOSX10.4 (i686) SDK from XCode 3.2.2 and Apple gcc-5493 (v4.0.1)
  -5        MacOSX10.5 (i686) SDK from XCode 3.2.2 and Apple gcc-5493 (v4.0.1)
  -6        MacOSX10.6 (i686) SDK from XCode 3.2.2 and Apple gcc-5493 (v4.0.1)
  -j n      Number of parallel make jobs [$makejobs]
  -h        Display this help and exit
  -v        Display version and exit

The following shell variables are influential:
  PREFIX    Installation direcrory [$PREFIX]
  XCODEVER  XCode Developer Tools version [$XCODEVER]
  SDKVER    MacOSX SDK version [$SDKVER]
  GCCSRC    Apple gcc version [$GCCSRC]

NB Apple gcc-5646 and later (v4.2.1) produce a debug format that is
incompatible with odcctools-20090808.  These compilers can be built but they
cause 'as' to fail when compiling with the -g option:
/tmp/ccJSH4p1.s:43:Missing string
/tmp/ccJSH4p1.s:43:Rest of line ignored. 1st junk character valued 49 (1).
/tmp/ccJSH4p1.s:44:Unknown pseudo-op: .loc
/tmp/ccJSH4p1.s:44:Rest of line ignored. 1st junk character valued 49 (1).

This prevents them from being used to build MythTV and dependent libraries.
END
}
version() { echo "Version $version, last modified `date -Rr "$name"`"; }
die() { echo $@ >&2 ; exit 1; }


# Installation prefix
: ${PREFIX:="/opt/mac"}

# MacOSX target
: ${TARGET:="i686-apple-darwin8"} # darwin7=10.3, 8=10.4, 9=10.5 etc.
: ${XCODEVER:="2.2.1"}
: ${SDKVER:="MacOSX10.4"}

# Open Darwin cctools
: ${ODCCTOOLS:="odcctools-20090808"}
: ${ODCCTOOLS_URL:="http://svn.macosforge.org/repository/odcctools/release/$ODCCTOOLS.tar.bz2"}
# latest Apple cctools:
# http://www.opensource.apple.com/tarballs/cctools/cctools-782.tar.gz

# Apple gcc
: ${GCCSRC:="gcc-5247"}
# gcc-5247, 5341, 5370 (v4.0.1) need XCode 2.x,  
# gcc-5482, 5488, 5490, 5493 (v4.0.1) need XCode >= 3.1
# gcc-5646 (v4.2.1) needs XCode >= 3.1
# latest gcc-5664 (4.2.1) needs XCode >= 3.1
# Apple gcc URL
: ${GCC_URL:="http://www.opensource.apple.com/tarballs/gcc"}

# Support tools
: ${XAR:="xar-1.5.2"}
: ${XAR_URL:="http://xar.googlecode.com/files/$XAR.tar.gz"}


# Default parameters
: ${GCCMAKE:="no"} # yes=build gcc with makefile, no= use internal commands
if [ -r "/proc/cpuinfo" ]; then
    cpus=`grep -c "^processor" /proc/cpuinfo`
    [ -n "$cpus" ] && [ $cpus -gt 1 ] && makejobs=$(($cpus + 1))
fi
: ${makejobs:=1}


# Parse options
while getopts ":3456Pj:hv" opt
do
    case "$opt" in
#        3) TARGET="powerpc-apple-darwin7"; SDKVER="MacOSX10.3.9"; XCODEVER="3.1.2"; GCCSRC="gcc-5493" ;;
        3) TARGET="powerpc-apple-darwin7"; SDKVER="MacOSX10.3.9"; XCODEVER="2.4.1"; GCCSRC="gcc-5247" ;;
        P) TARGET="powerpc-apple-darwin8";   SDKVER="MacOSX10.4";   XCODEVER="3.2.2"; GCCSRC="gcc-5493" ;;
        4) TARGET="i686-apple-darwin8";   SDKVER="MacOSX10.4";   XCODEVER="3.2.2"; GCCSRC="gcc-5493" ;;
        5) TARGET="i686-apple-darwin9";   SDKVER="MacOSX10.5";   XCODEVER="3.2.2"; GCCSRC="gcc-5493" ;;
        6) TARGET="i686-apple-darwin10";   SDKVER="MacOSX10.6";   XCODEVER="3.2.2"; GCCSRC="gcc-5493" ;;
        j) [ $OPTARG -lt 1 -o $OPTARG -gt 99 ] && die "Invalid number of jobs: $OPTARG"
            makejobs=$OPTARG ;;
        h) myhelp; exit ;;
        v) version; exit ;;
        \?) [ -n "$OPTARG" ] && die "Invalid option -$OPTARG" ;;
        :) [ -n "$OPTARG" ] && die "-$OPTARG requires an argument" ;;
        *) die "Unknown option $opt" ;;
    esac
done
shift $(($OPTIND - 1))

# Arguments
[ $# -gt 0 ] && die "Excess arguments"


###############################################################
# Support functions
###############################################################

# Display a banner
# $1= message
banner() {
    echo ""
    echo "*********************************************************************"
    printf "%-.80s\n" "$1"
    echo "*********************************************************************"
    echo ""
}

# Unpack an archive
# $1= filename
unpack() {
    echo "Extracting `basename "$1"` ..."
    case "$1" in
        *.tar.gz) tar -zxf $@ ;;
        *.tar.bz2) tar -jxf $@ ;;
        *.bz2) bunzip2 -k $@ ;;
        *.zip) unzip -a -q $@ ;;
        *) die "Unknown archive type: $1" ;;
    esac
}

# Install a package, $1= package
install_pkg() {
    echo "Installing $1 ..."
    if which apt-get > /dev/null 2>&1 ; then
        sudo apt-get install $1 || die "Failed to install $1"
    elif which yum >/dev/null 2>&1 ; then
        sudo yum install $1 || die "Failed to install $1"
    elif which urpmi >/dev/null 2>&1 ; then
        sudo urpmi $1 || die "Failed to install $1"
    else
        die "Don't know how to install $1"
    fi
}


###############################################################
# Check for & install required tools
###############################################################

PATH="$HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

# Check for basic build tools
which make >/dev/null 2>&1 || install_pkg make
which gcc >/dev/null 2>&1 || install_pkg gcc
which patch >/dev/null 2>&1  || install_pkg patch
which perl >/dev/null 2>&1  || install_pkg perl

if [ $makejobs -gt 1 ]; then
    # Parallel make
    make="make -j $makejobs"
else
    make="make"
fi

# Need wget
which wget >/dev/null 2>&1 || nstall_pkg wget

# Need dmg2img & pax to extracr XCode
which dmg2img >/dev/null 2>&1 || install_pkg dmg2img
which pax >/dev/null 2>&1 || install_pkg pax

# Need libuuid to build odcctools
check_uuid() {
    gcc -c -x c - -o /dev/null -l uuid >/dev/null 2>&1 <<-EOF
		#include <uuid/uuid.h>
		int main(void){ uuid_t u; uuid_generate(u); return 0; }
	EOF
}
check_uuid || install_pkg uuid-dev

# Need bison & flex to build gcc
which bison >/dev/null 2>&1 || install_pkg bison
which flex >/dev/null 2>&1 || install_pkg flex

# Need xar to unpack XCode 3.x
build_xar() {
    local arc=`basename "$XAR_URL"`
    [ -e  "$arc" ] || wget "$XAR_URL"
    unpack "$arc"
    cd "$XAR"
    ./configure -q --prefix="$HOME"
    make
    make install || true
    cd ..
}
which xar >/dev/null 2>&1 || build_xar


###############################################################
# Create the installation folder
###############################################################

mkdir -p "$PREFIX/SDKs" || die "Can't create the SDK folder: $PREFIX/SDKs\n\
Do you have write permission in $PREFIX?"


###############################################################
# Extract MacOSX SDK from XCode Developer Tools
###############################################################

banner "Install $SDKVER SDK"

getxcode() {
    cat >&2 <<-END
	You must manually download XCode $XCODEVER Developer Tools from Apple.

	Goto http://developer.apple.com/programs/start/standard/
	Sign up for a developer account - it's free.
	Goto http://connect.apple.com and sign in.
	Click 'Developer Tools'
	Download 'Xcode $XCODEVER Developer Tools' into $PWD
	When the download is complete, restart this script.
	END
    exit 1
}

# Install XCode 2.x
install_xcode2() {
    local dmg=$1

    local src sdk
    case "$SDKVER" in
        MacOSX10.3*) src="/mnt/Packages/${SDKVER}.pkg/Contents"; SDKDIR="${SDKVER}.sdk" ;;
        MacOSX10.4) src="/mnt/Packages/${SDKVER}.Universal.pkg/Contents"; SDKDIR="${SDKVER}u.sdk" ;;
        *) die "Unsupported SDK version: $SDKVER" ;;
    esac

    local sdkarc="xcode_${XCODEVER}_$SDKDIR.Archive.pax.gz"
    if [ ! -e "$sdkarc" ]; then
        local img="${dmg%.dmg}.img"
        [ -e "$dmg" ] || getxcode
        if [ ! -e "$img" ]; then
            echo "Decompressing $dmg ..."
            dmg2img -s "$dmg" "$img"
        fi

        echo "Mount $img ..."
        #sudo modprobe hfsplus
        sudo mount -t hfsplus -o loop "$img" /mnt
        ls -lR /mnt > "xcode_${XCODEVER}-ls-lR"

        echo "Saving $sdkarc ..."
        cp "$src/Archive.pax.gz" "$sdkarc"

        sudo umount /mnt

        [ -e "$sdkarc" ] || die "SDK not found"
        rm $img
    fi

    if [ ! -d "$PREFIX/SDKs/$SDKDIR" ]; then
        echo "Extracting $sdkarc ..."
        gunzip -c "$sdkarc" | pax -r

        echo "Installing $SDKDIR ..."
        mv "Developer/SDKs/$SDKDIR/" "$PREFIX/SDKs/"
        rm -rf "Developer"
    fi

    return 0
}

# For XCode 3.1 and later
install_xcode3() {
    local dmg=$1

    local src sdk
    case "$SDKVER" in
        MacOSX10.4) src="/mnt/Packages/${SDKVER}.Universal.pkg"; SDKDIR="${SDKVER}u.sdk" ;;
        MacOSX10.[35-9]*) src="/mnt/Packages/${SDKVER}.pkg"; SDKDIR="${SDKVER}.sdk"  ;;
        *) die "Unsupported SDK version: $SDKVER" ;;
    esac

    local sdkarc="xcode_${XCODEVER}_$SDKDIR.Payload"
    if [ ! -e "$sdkarc" ]; then
        local img="${dmg%.dmg}.img"
        if [ ! -e "$img" ]; then
            [ -e "$dmg" ] || getxcode
            echo "Decompressing $dmg ..."
            dmg2img -s "$dmg" "$img"
        fi

        # See http://www.64lines.com/mounting-hfs-plus
        local start
        start=$(( `grep -a -bo -m1 "H+" "$img" | cut -d ':' -f 1` - 1024 ))

        echo "Mount $img ..."
        #sudo modprobe hfsplus
        sudo losetup -o $start /dev/loop0 "$img"
		sudo mount -t hfsplus -o ro /dev/loop0 /mnt
        ls -lR /mnt > "xcode_${XCODEVER}-ls-lR"

        echo "Saving $sdkarc ..."
        xar -xv -f "$src" Payload > /dev/null && mv Payload "$sdkarc"

        sudo umount /mnt
        sudo losetup -d /dev/loop0

        [ -e "$sdkarc" ] || die "SDK not found"
        rm $img
    fi

    if [ ! -d "$PREFIX/SDKs/$SDKDIR" ]; then
        echo "Extracting $sdkarc ..."
        zcat "$sdkarc" | cpio -id 2> /dev/null

        echo "Installing $SDKDIR ..."
        mv "SDKs/$SDKDIR/" "$PREFIX/SDKs/"
        rm -rf "SDKs/"
    fi

    return 0
}

case "$XCODEVER" in
    #10.3
    # 1.0) 7B85_Xcode_CD.dmg
    1.2) install_xcode2 "xcode_1.2_7k246_cd.dmg" ;;
    # 1.5) xcode_tools_1.5_cd.dmg.bin
    1.5) install_xcode2 "XcodeTools1.5__CD.dmg" ;; # 10.1, 10.2.8, 10.3
    #10.4
    2.2.1) install_xcode2 "xcode_2.2.1_8g1165_018213632.dmg" ;; # 10.2.8 10.3.9 10.4u
    2.3)   install_xcode2 "xcode_2.3_8m1780_oz693620813.dmg" ;;
    #64-bit
    2.4)   install_xcode2 "xcode_2.4_8k1079_6936199.dmg" ;;
    2.4.1) install_xcode2 "xcode_2.4.1_8m1910_6936315.dmg";; # 10.2.8 10.3.9 10.4u
    #10.4/10.5
    2.5)   install_xcode2 "xcode25_8m2558_developerdvd.dmg";;
    #10.5 -darwin9
    3.0)   install_xcode3 "xcode_3.0.dmg" ;;
    3.1)   install_xcode3 "xcode31_2199_developerdvd.dmg" ;;
    3.1.1) install_xcode3 "xcode311_9m2517_developerdvd.dmg" ;;
    3.1.2) install_xcode3 "xcode312_2621_developerdvd.dmg" ;; # 10.3.9 10.4u 10.5
    3.1.3) install_xcode3 "xcode313_2736_developerdvd.dmg" ;;
    3.1.4) install_xcode3 "xcode314_2809_developerdvd.dmg" ;;
    #10.6, -darwin10
    3.2)   install_xcode3 "xcode3210a432.dmg" ;;
    3.2.1) install_xcode3 "xcode321_10m2003_developerdvd.dmg" ;;
    3.2.2) install_xcode3 "xcode322_2148_developerdvd.dmg";; # 10.4u 10.5 10.6
    *) die "Unsupported Xcode version $XCODEVER" ;;
esac

if [ ! -d "$PREFIX/SDKs/$SDKDIR/usr/lib/$TARGET" ]; then
    # Match darwin version to SDK in use
    darwin="${TARGET%-darwin*}-darwin"
    for x in 7 8 9 10 11 12 ; do
        [ -d "$PREFIX/SDKs/$SDKDIR/usr/lib/$darwin$x" ] &&  { TARGET="$darwin$x"; break ; }
    done
fi

#[ ! -L "$PREFIX/$TARGET" ] && ln -sf "SDKs/$SDKDIR/usr/" "$PREFIX/$TARGET"


###############################################################
# odcctools
###############################################################

banner "Build $ODCCTOOLS"

patch_odcctools() {
    # Patch to make ld64 compile
    patch -p0 <<-"END"
	--- odcctools-20090808.orig/ld64/src/MachOReaderRelocatable.hpp	2008-04-30 00:47:43.000000000 +0200
	+++ odcctools-20090808/ld64/src/MachOReaderRelocatable.hpp	2011-02-23 12:21:55.000000000 +0100
	@@ -26,6 +26,7 @@
	 #define __OBJECT_FILE_MACH_O__
	 
	 #include <stdint.h>
	+#include <stdio.h>
	 #include <math.h>
	 #include <unistd.h>
	 #include <sys/param.h>
	--- odcctools-20090808.orig/ld64/src/Options.cpp	2009-08-08 22:46:09.000000000 +0200
	+++ odcctools-20090808/ld64/src/Options.cpp	2011-02-23 12:24:31.000000000 +0100
	@@ -29,6 +29,7 @@
	 #include <fcntl.h>
	 #include <ctype.h>
	 #include <vector>
	+#include <stdio.h>
	 
	 #include "config.h"
	 #include "Options.h"}
	END
}

if [ ! -d "$ODCCTOOLS.$TARGET" ]; then
    arc=`basename "$ODCCTOOLS_URL"`
    [ -e  "$arc" ] || wget "$ODCCTOOLS_URL"
    unpack "$arc"
    patch_odcctools
    mv "$ODCCTOOLS" "$ODCCTOOLS.$TARGET"
fi

cd "$ODCCTOOLS.$TARGET"
if [ ! -e Makefile ]; then
    echo "*** Configuring $ODCCTOOLS ...\n"
    set -x
    ./configure -q --target=$TARGET --prefix="$PREFIX" \
        --with-sysroot="$PREFIX/SDKs/$SDKDIR" \
        CPPFLAGS="-D_FORTIFY_SOURCE=0"
    set +x
fi

echo "\n*** Make $ODCCTOOLS ...\n"
$make

echo "\n*** Install $ODCCTOOLS ...\n"
make install
cd ..

# To use ld_classic in place of ld64
#mv $PREFIX/bin/$TARGET-ld $PREFIX/bin/$TARGET-ld64
#mv $PREFIX/bin/$TARGET-ld_classic $PREFIX/bin/$TARGET-ld


###############################################################
# gcc
###############################################################

banner "Build $GCCSRC"

# gcc directory name
GCCDIR="$GCCSRC"

patch_gcc() {
    # Required for gcc-5247..5370
    patch -p1 $@ <<-END
	--- a/gcc/collect2.c	2005-06-06 21:20:26.000000000 +0200
	+++ b/gcc/collect2.c	2011-02-23 12:44:56.000000000 +0100
	@@ -1577,7 +1577,7 @@ collect_execute (const char *prog, char
	   if (redir)
	     {
	       /* Open response file.  */
	-      redir_handle = open (redir, O_WRONLY | O_TRUNC | O_CREAT);
	+      redir_handle = open (redir, O_WRONLY | O_TRUNC | O_CREAT, 0);
	 
	       /* Duplicate the stdout and stderr file handles
	      so they can be restored later.  */
	END
}

if [ ! -d "$GCCDIR" ]; then
    arc="$GCCSRC.tar.gz"
    [ -e  "$arc" ] || wget "$GCC_URL/$arc"
    unpack "$arc"

	patch_gcc -d "$GCCDIR" -N || true
	perl -pi -e "s,SYSTEM_HEADER_DIR='\$(CROSS_SYSTEM_HEADER_DIR)',SYSTEM_HEADER_DIR='$PREFIX/SDKs/$SDKDIR\$(NATIVE_SYSTEM_HEADER_DIR)'," "$GCCDIR/gcc/configure"
	# gcc-5247
	perl -pi -e "s,/usr/bin/libtool,$PREFIX/bin/$TARGET-libtool," "$GCCDIR/gcc/config/darwin.h"
	# gcc-5370
	perl -pi -e "s,Zdynamiclib:libtool,Zdynamiclib:$PREFIX/bin/$TARGET-libtool," "$GCCDIR/gcc/config/darwin.h"
	perl -pi -e "s|-Wl,-install_name,..slibdir.|-Wl,-install_name,/usr/lib|" "$GCCDIR/gcc/config/t-slibgcc-darwin"
	perl -pi -e "s,\"lipo\",\"$TARGET-lipo\"," "$GCCDIR/gcc/config/darwin-driver.c"

	rm -rf "$GCCDIR/libstdc++-v3"
	rm -rf "$GCCDIR/libgomp"
fi

export PATH="$PATH:$PREFIX/bin"

# gcc-5572 & later need lipo
[ "$GCCSRC" \> "gcc-5571" ] && cat > "$PREFIX/bin/lipo" <<-EOF && chmod a+x "$PREFIX/bin/lipo"
	#!/bin/sh
	mode="\$1"
	shift
	input="\$1"
	shift
	exec $PREFIX/bin/$TARGET-lipo \$mode $PREFIX/SDKs/$SDKDIR\$input \$@
EOF

# gcc-5482 & later need dsymutil (to produce debug info) if passed -g option
[ "$GCCSRC" \> "gcc-5481" ] && cat > "$PREFIX/bin/dsymutil" <<-EOF && chmod a+x "$PREFIX/bin/dsymutil"
	#!/bin/sh
	exit 0
EOF

rm -rf "build-$GCCDIR.$TARGET"
mkdir -p "build-$GCCDIR.$TARGET"
cd "build-$GCCDIR.$TARGET"

# Match c++ library version to gcc version
[ "$GCCSRC" \> "gcc-5571" ] && SDKCXXVER="4.2.1" || SDKCXXVER="4.0.0"

args="--target=$TARGET\
    --prefix=/usr --with-sysroot=$PREFIX/SDKs/$SDKDIR\
    --disable-nls\
    --enable-languages=c,c++,objc,obj-c++\
    --enable-version-specific-runtime-libs\
    --with-gxx-include-dir=/usr/include/c++/$SDKCXXVER\
    --with-as=$PREFIX/bin/$TARGET-as\
    --with-ld=$PREFIX/bin/$TARGET-ld\
    --with-libtool=$PREFIX/bin/$TARGET-libtool"
case "$TARGET" in
    # 10.3 ppc
	powerpc-apple-darwin7) ;;
    # 10.4 ppc64
	powerpc-apple-darwin8) args="$args --with-arch=ppc64" ;;
    # 10.4 pentium-m
    i686-apple-darwin8) args="$args --with-arch=pentium-m --with-tune=prescott" ;;
    # 10.5+ need 64-bit nocona or core2
    i686-apple-darwin*) args="$args --with-arch=nocona" ;;
    x86_64-apple-darwin*) args="$args --with-arch=nocona" ;;
    *) die "Unsupported target: $TARGET" ;;
esac

# gcc-5247 needs _FORTIFY_SOURCE=0 or get runtime errors
[ "$GCCSRC" \< "gcc-5341" ] && export CPPFLAGS="-D_FORTIFY_SOURCE=0"

# Apple gcc-5646 and later (v4.2.1) produce a debug format that is incompatible
# with odcctools-20090808.  These compilers can be built but they cause
# 'as' to fail when compiling with the -g option:
if [ "$GCCSRC" \> "gcc-5645" ]; then
    # Default CFLAGS contain -g
    export CFLAGS="-O2"
    # Default LIBGCC2_DEBUG_CFLAGS contain -g
    export LIBGCC2_DEBUG_CFLAGS=" "
fi

echo "*** Configure $GCCSRC ..."
set -x; ../$GCCDIR/configure $args ; set +x
export CFLAGS=

banner "Make $GCCSRC"
$make
export LIBGCC2_DEBUG_CFLAGS=

banner "Install $GCCSRC"
make install prefix=$PREFIX

cd ..

echo "\n*** Fixing up libraries ..."
dir="$PWD"
for GCCVER in $PREFIX/lib/gcc/$TARGET/4.* ; do
    [ -d "$GCCVER" ] && break
done
cd "$GCCVER"
mv static/libgcc.a libgcc_static.a
mv kext/libgcc.a libcc_kext.a
rm -r static kext
# Match c++ library name to SDK version
case "$SDKVER" in
    MacOSX10.[3]*)   SDKCXXLIB="libstdc++.6.0.3.dylib" ;;
    MacOSX10.[45]*)  SDKCXXLIB="libstdc++.6.0.4.dylib" ;;
    MacOSX10.[6-9]*) SDKCXXLIB="libstdc++.6.0.9.dylib" ;;
    *) die "Unsupported SDK version: $SDKVER" ;;
esac
ln -sf "$PREFIX/SDKs/$SDKDIR/usr/lib/$SDKCXXLIB" "$SDKCXXLIB"
ln -sf "$PREFIX/SDKs/$SDKDIR/usr/lib/$SDKCXXLIB" libstdc++.6.dylib
ln -sf "$PREFIX/SDKs/$SDKDIR/usr/lib/$SDKCXXLIB" libstdc++.dylib
cd "$dir"
echo "Done"



###############################################################
# Verify cross-compiler installation
###############################################################

banner "Test $TARGET"

check_cc() { "$PREFIX/bin/$TARGET-gcc" -x c   -c - -o /dev/null $@ >/dev/null ; }
check_cx() { "$PREFIX/bin/$TARGET-g++" -x c++ -c - -o /dev/null $@ >/dev/null ; }

check_cc <<-EOF || die "gcc failed"
	#include <stdio.h>
	int main(void){ printf("Hello World.\n"); return 0; }
EOF
check_cx <<-EOF || die "g++ failed"
	#include <iostream>
	int main(){ std::cout << "Hello World.\n"; return 0; }
EOF
echo "OK"

# Tidy up
rm -rf "$GCCDIR"
rm -rf "build-$GCCDIR.$TARGET"
rm -rf "$ODCCTOOLS.$TARGET"

banner "Finished"
